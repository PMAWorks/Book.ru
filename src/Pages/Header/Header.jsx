import react from 'react'
import { useState } from 'react'
import { NavLink } from 'react-router-dom'
import s from './Header.module.css'

export const Header = () => {

    var [EnterMode, setEnterMode] = useState('None') //Флаг входа/регистрации

    return (
        <div className={s.Header}>
            <NavLink to="/" className={s.Logo}>
                <svg width="199" height="55" viewBox="0 0 199 55" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g opacity="0.9"><path d="M7.85067 30.6263C8.62952 30.7256 9.56914 30.7256 10.92 30.7256C14.5094 30.7256 17.6786 29.3274 17.6786 25.6861C17.6786 22.1505 14.5094 20.7497 10.5549 20.7497H7.85067V30.6263ZM7.85067 15.0794H10.4486C14.6106 15.0794 16.8459 13.3634 16.8459 10.7649C16.8459 8.11258 14.8168 6.70987 11.2281 6.70987C9.5147 6.70987 8.52576 6.81364 7.85067 6.91676V15.0794ZM0 1.66782C2.07908 1.25021 6.29296 0.937004 10.2462 0.937004C15.0794 0.937004 18.0417 1.40457 20.5916 2.91168C23.0332 4.21254 24.8016 6.60355 24.8016 9.77789C24.8016 12.8965 22.9807 15.8076 19.0307 17.2622V17.3666C23.0332 18.4593 25.9975 21.4742 25.9975 25.9961C25.9975 29.166 24.5403 31.6659 22.3536 33.4324C19.8095 35.4602 15.547 36.6035 8.5802 36.6035C4.67761 36.6035 1.76715 36.3454 0 36.0853V1.66782Z" fill="#0E2F84"></path><path d="M38.1643 18.822C38.1643 25.6869 41.3893 30.5215 46.6914 30.5215C52.0473 30.5215 55.1153 25.4269 55.1153 18.6151C55.1153 12.3228 52.096 6.91821 46.6395 6.91821C41.283 6.91821 38.1643 12.0134 38.1643 18.822ZM63.4848 18.3563C63.4848 29.8438 56.5167 36.8125 46.2763 36.8125C35.8732 36.8125 29.791 28.9618 29.791 18.9815C29.791 8.47848 36.499 0.62653 46.8457 0.62653C57.6088 0.62653 63.4848 8.68857 63.4848 18.3563Z" fill="#0E2F84"></path><path d="M75.4441 18.822C75.4441 25.6869 78.6671 30.5215 83.9699 30.5215C89.3245 30.5215 92.3951 25.4269 92.3951 18.6151C92.3951 12.3228 89.3783 6.91821 83.918 6.91821C78.5627 6.91821 75.4441 12.0134 75.4441 18.822ZM100.763 18.3563C100.763 29.8438 93.7991 36.8125 83.5568 36.8125C73.1537 36.8125 67.0708 28.9618 67.0708 18.9815C67.0708 8.47848 73.7827 0.62653 84.1255 0.62653C94.8886 0.62653 100.763 8.68857 100.763 18.3563Z" fill="#0E2F84"></path><path d="M105.965 1.19693H113.819V16.6907H113.973C114.754 15.3399 115.585 14.0929 116.362 12.8445L124.315 1.19693H134.041L122.446 16.1207L134.666 36.2402H125.411L116.832 21.1115L113.819 24.8021V36.2402H105.965V1.19693Z" fill="#0E2F84"></path><path d="M141.632 36.8125C138.98 36.8125 137.056 34.7847 137.056 32.0311C137.056 29.2206 138.98 27.194 141.737 27.194C144.489 27.194 146.363 29.17 146.363 32.0311C146.363 34.7847 144.489 36.8125 141.685 36.8125H141.632Z" fill="#0E2F84"></path><path d="M151.148 19.1868C151.148 15.443 151.043 13.0014 150.938 10.8173H157.751L158.009 15.4949H158.218C159.518 11.8043 162.639 10.2453 165.079 10.2453C165.808 10.2453 166.171 10.2453 166.743 10.3491V17.8372C166.171 17.679 165.497 17.5759 164.612 17.5759C161.702 17.5759 159.724 19.1349 159.203 21.5804C159.103 22.0992 159.05 22.7243 159.05 23.3482V36.2402H151.148V19.1868Z" fill="#0E2F84"></path><path d="M195.182 28.0786C195.182 31.4054 195.287 34.107 195.389 36.2399H188.527L188.164 32.6544H188.006C187.017 34.2134 184.629 36.8145 180.049 36.8145C174.905 36.8145 171.108 33.5869 171.108 25.7382V10.8144H179.061V24.4892C179.061 28.1824 180.26 30.4184 183.016 30.4184C185.2 30.4184 186.449 28.9106 186.965 27.6623C187.175 27.1934 187.227 26.5689 187.227 25.9457V10.8144H195.182V28.0786Z" fill="#0E2F84"></path><path d="M1.39467 49.8359H4.88149C4.75891 48.3923 3.85984 47.2487 2.31635 47.2487C1.71657 47.2487 1.19474 47.4159 0.717532 47.6266L0.484284 46.8822C1.01683 46.6495 1.66123 46.4496 2.37169 46.4496C4.72619 46.4496 5.92515 48.1484 5.92515 50.3244C5.92515 52.7782 4.30372 54.1777 2.31635 54.1777C1.57198 54.1777 0.894848 54.0337 0.362305 53.7892L0.572942 53.0228C1.00612 53.2227 1.62791 53.3673 2.18307 53.3673C3.83722 53.3673 4.82615 52.1678 4.8922 50.6136H1.39467V49.8359Z" fill="#0E2F84"></path><path d="M11.9511 46.5711V54.0553H10.9735V47.3815H8.49757V49.6474C8.49757 51.2688 8.43093 53.0783 7.37596 53.7887C7.09868 53.9666 6.66551 54.1445 6.23233 54.1445L6.11035 53.3668C6.40965 53.3115 6.72084 53.1336 6.89875 52.967C7.49853 52.3785 7.55387 50.9237 7.55387 49.7247V46.5711H11.9511Z" fill="#0E2F84"></path><path d="M17.476 50.5459H14.5669V53.2443H17.8092V54.0547H13.6006V46.5705H17.6426V47.3815H14.5669V49.7467H17.476V50.5459Z" fill="#0E2F84"></path><path d="M19.932 46.5705V49.8907H20.2318L22.797 46.5705H23.9626L21.1315 50.002C22.3638 50.1686 22.8416 50.9231 23.2296 51.934C23.5074 52.7004 23.7187 53.3883 24.0519 54.0547H23.0076C22.7416 53.5442 22.5304 52.8777 22.3305 52.2893C21.9866 51.3009 21.5088 50.6238 20.2431 50.6238H19.932V54.0547H18.9775V46.5705H19.932Z" fill="#0E2F84"></path><path d="M32.5781 50.2686C32.7888 50.3239 33.0553 50.3459 33.3772 50.3459C34.5435 50.3459 35.2539 49.7801 35.2539 48.7471C35.2539 47.7588 34.5548 47.281 33.4885 47.281C33.0666 47.281 32.7447 47.3149 32.5781 47.3589V50.2686ZM31.6118 46.6598C32.0783 46.5818 32.6894 46.5152 33.4665 46.5152C34.4215 46.5152 35.1207 46.7371 35.5651 47.137C35.9757 47.4922 36.2203 48.0366 36.2203 48.7025C36.2203 49.3802 36.0203 49.9127 35.6425 50.3019C35.132 50.8457 34.2995 51.1236 33.3552 51.1236C33.0666 51.1236 32.8001 51.1123 32.5781 51.0564V54.0547H31.6118V46.6598Z" fill="#0E2F84"></path><path d="M38.1613 50.3583C38.1613 51.9571 39.0276 53.3893 40.5485 53.3893C42.0807 53.3893 42.947 51.9797 42.947 50.2803C42.947 48.7922 42.1699 47.238 40.5598 47.238C38.961 47.238 38.1613 48.7143 38.1613 50.3583ZM43.9687 50.2357C43.9687 52.8122 42.4032 54.1777 40.4932 54.1777C38.5165 54.1777 37.1289 52.6456 37.1289 50.3803C37.1289 48.0038 38.6057 46.4496 40.6038 46.4496C42.6477 46.4496 43.9687 48.0151 43.9687 50.2357Z" fill="#0E2F84"></path><path d="M46.1992 46.5705V49.7021H49.8187V46.5705H50.7964V54.0547H49.8187V50.5459H46.1992V54.0547H45.2329V46.5705H46.1992Z" fill="#0E2F84"></path><path d="M53.417 46.5705V49.7021H57.0365V46.5705H58.0141V54.0547H57.0365V50.5459H53.417V54.0547H52.4507V46.5705H53.417Z" fill="#0E2F84"></path><path d="M60.299 50.3583C60.299 51.9571 61.1653 53.3893 62.6862 53.3893C64.2184 53.3893 65.0847 51.9797 65.0847 50.2803C65.0847 48.7922 64.3076 47.238 62.6975 47.238C61.0987 47.238 60.299 48.7143 60.299 50.3583ZM66.1064 50.2357C66.1064 52.8122 64.5409 54.1777 62.6308 54.1777C60.6542 54.1777 59.2666 52.6456 59.2666 50.3803C59.2666 48.0038 60.7434 46.4496 62.7415 46.4496C64.7854 46.4496 66.1064 48.0151 66.1064 50.2357Z" fill="#0E2F84"></path><path d="M69.8938 50.5801H67.1514V49.8583H69.8938V50.5801Z" fill="#0E2F84"></path><path d="M72.1177 53.3126C72.3396 53.3567 72.5949 53.368 72.9281 53.368C73.5279 53.368 74.1384 53.1787 74.5049 52.7908C74.7602 52.5242 74.9161 52.1577 74.9161 51.6912C74.9161 51.114 74.6715 50.7249 74.305 50.4702C73.9164 50.2031 73.4166 50.0924 72.8841 50.0924C72.6615 50.0924 72.3616 50.1144 72.1177 50.1364V53.3126ZM75.3486 46.5722V47.3827H72.1177V49.3926C72.3509 49.3593 72.7948 49.3373 73.0394 49.3373C73.7498 49.3373 74.4496 49.4926 74.9714 49.8365C75.5379 50.2031 75.9264 50.7921 75.9264 51.6686C75.9264 52.3683 75.6932 52.9021 75.304 53.29C74.6935 53.8898 73.6832 54.123 72.6615 54.123C71.9844 54.123 71.4733 54.0784 71.1514 54.0344V46.5722H75.3486Z" fill="#0E2F84"></path><path d="M78.0217 46.5705V49.7241C78.0217 50.9124 77.9991 51.8894 77.9331 52.889L77.9551 52.9003C78.3323 52.1227 78.7988 51.3122 79.3433 50.4239L81.7638 46.5705H82.7295V54.0547H81.8191V50.8684C81.8191 49.6575 81.8304 48.7691 81.9078 47.8254L81.8745 47.8147C81.5079 48.6364 80.9974 49.5022 80.4869 50.3346L78.1437 54.0547H77.1113V46.5705H78.0217Z" fill="#0E2F84"></path><path d="M85.356 53.3126C85.5779 53.3567 85.8332 53.368 86.1664 53.368C86.7662 53.368 87.3767 53.1787 87.7432 52.7908C87.9984 52.5242 88.1543 52.1577 88.1543 51.6912C88.1543 51.114 87.9098 50.7249 87.5433 50.4702C87.1547 50.2031 86.6549 50.0924 86.1223 50.0924C85.8998 50.0924 85.5999 50.1144 85.356 50.1364V53.3126ZM88.5869 46.5722V47.3827H85.356V49.3926C85.5892 49.3593 86.0331 49.3373 86.2776 49.3373C86.9881 49.3373 87.6878 49.4926 88.2097 49.8365C88.7761 50.2031 89.1647 50.7921 89.1647 51.6686C89.1647 52.3683 88.9314 52.9021 88.5423 53.29C87.9318 53.8898 86.9215 54.123 85.8998 54.123C85.2227 54.123 84.7116 54.0784 84.3896 54.0344V46.5722H88.5869Z" fill="#0E2F84"></path><path d="M95.4765 46.5711V54.0553H94.4988V47.3815H92.023V49.6474C92.023 51.2688 91.9563 53.0783 90.9014 53.7887C90.6241 53.9666 90.1909 54.1445 89.7577 54.1445L89.6357 53.3668C89.935 53.3115 90.2462 53.1336 90.4241 52.967C91.0239 52.3785 91.0793 50.9237 91.0793 49.7247V46.5711H95.4765Z" fill="#0E2F84"></path><path d="M98.0364 46.5705V49.7241C98.0364 50.9124 98.0143 51.8894 97.9477 52.889L97.9697 52.9003C98.347 52.1227 98.814 51.3122 99.3579 50.4239L101.778 46.5705H102.744V54.0547H101.834V50.8684C101.834 49.6575 101.844 48.7691 101.922 47.8254L101.889 47.8147C101.523 48.6364 101.012 49.5022 100.502 50.3346L98.1583 54.0547H97.126V46.5705H98.0364Z" fill="#0E2F84"></path><path d="M105.036 50.3583C105.036 51.9571 105.902 53.3893 107.424 53.3893C108.956 53.3893 109.822 51.9797 109.822 50.2803C109.822 48.7922 109.044 47.238 107.434 47.238C105.835 47.238 105.036 48.7143 105.036 50.3583ZM110.843 50.2357C110.843 52.8122 109.278 54.1777 107.368 54.1777C105.392 54.1777 104.003 52.6456 104.003 50.3803C104.003 48.0038 105.48 46.4496 107.478 46.4496C109.522 46.4496 110.843 48.0151 110.843 50.2357Z" fill="#0E2F84"></path><path d="M113.427 47.3922H111.151V46.5705H116.691V47.3922H114.404V54.0547H113.427V47.3922Z" fill="#0E2F84"></path><path d="M27.0816 47.3922H24.8057V46.5705H30.3459V47.3922H28.0592V54.0547H27.0816V47.3922Z" fill="#0E2F84"></path><path d="M121.527 50.5459H118.618V53.2443H121.861V54.0547H117.651V46.5705H121.693V47.3815H118.618V49.7467H121.527V50.5459Z" fill="#0E2F84"></path><path d="M123.881 46.5705V48.947C123.881 49.9687 124.414 50.5459 125.469 50.5459C125.991 50.5459 126.558 50.3685 126.946 50.124V46.5705H127.923V54.0547H126.946V50.8791H126.924C126.402 51.179 125.78 51.345 125.125 51.345C124.137 51.345 122.916 50.9231 122.916 49.091V46.5705H123.881Z" fill="#0E2F84"></path><path d="M130.539 46.5705V49.7021H134.159V46.5705H135.136V54.0547H134.159V50.5459H130.539V54.0547H129.573V46.5705H130.539Z" fill="#0E2F84"></path><path d="M140.469 50.9451L139.737 48.7911C139.57 48.3026 139.459 47.8587 139.348 47.4256H139.326C139.215 47.8694 139.093 48.3252 138.948 48.7798L138.215 50.9451H140.469ZM138.015 51.7008L137.238 54.0547H136.239L138.782 46.5699H139.947L142.501 54.0547H141.469L140.669 51.7008H138.015Z" fill="#0E2F84"></path><path d="M147.317 47.3482C147.15 47.3149 146.839 47.2596 146.407 47.2596C145.451 47.2596 144.641 47.6261 144.641 48.6584C144.641 49.5581 145.44 50.08 146.495 50.08C146.817 50.08 147.128 50.08 147.317 50.0686V47.3482ZM143.264 54.0547C143.375 53.8554 143.475 53.6221 143.564 53.3776C143.885 52.5225 144.085 51.4788 144.696 50.8684C144.874 50.6904 145.096 50.5578 145.318 50.4905V50.4578C144.397 50.3019 143.664 49.6355 143.664 48.6138C143.664 47.9587 143.93 47.4369 144.352 47.0924C144.818 46.7157 145.551 46.5158 146.495 46.5158C147.128 46.5158 147.794 46.5705 148.283 46.6705V54.0547H147.317V50.8124H146.606C146.139 50.8124 145.795 50.9124 145.529 51.179C145.018 51.7008 144.807 52.8004 144.541 53.5108C144.463 53.6995 144.407 53.8554 144.297 54.0547H143.264Z" fill="#0E2F84"></path><path d="M157.887 53.8108C157.532 53.9881 156.821 54.166 155.911 54.166C153.801 54.166 152.213 52.8332 152.213 50.3793C152.213 48.0367 153.801 46.4486 156.121 46.4486C157.055 46.4486 157.643 46.6485 157.899 46.7818L157.666 47.5702C157.299 47.3923 156.777 47.259 156.155 47.259C154.401 47.259 153.235 48.3806 153.235 50.346C153.235 52.1786 154.289 53.355 156.111 53.355C156.699 53.355 157.299 53.233 157.688 53.0444L157.887 53.8108Z" fill="#0E2F84"></path><path d="M159.949 46.5705V49.7241C159.949 50.9124 159.927 51.8894 159.861 52.889L159.883 52.9003C160.26 52.1227 160.727 51.3122 161.271 50.4239L163.692 46.5705H164.658V54.0547H163.747V50.8684C163.747 49.6575 163.758 48.7691 163.836 47.8254L163.803 47.8147C163.436 48.6364 162.926 49.5022 162.415 50.3346L160.071 54.0547H159.039V46.5705H159.949Z" fill="#0E2F84"></path><path d="M171.57 53.8108C171.214 53.9881 170.503 54.166 169.593 54.166C167.484 54.166 165.896 52.8332 165.896 50.3793C165.896 48.0367 167.484 46.4486 169.804 46.4486C170.737 46.4486 171.325 46.6485 171.581 46.7818L171.348 47.5702C170.981 47.3923 170.459 47.259 169.838 47.259C168.083 47.259 166.917 48.3806 166.917 50.346C166.917 52.1786 167.972 53.355 169.793 53.355C170.381 53.355 170.981 53.233 171.37 53.0444L171.57 53.8108Z" fill="#0E2F84"></path><path d="M174.582 47.3922H172.306V46.5705H177.846V47.3922H175.559V54.0547H174.582V47.3922Z" fill="#0E2F84"></path><path d="M182.681 50.5459H179.771V53.2443H183.014V54.0547H178.805V46.5705H182.847V47.3815H179.771V49.7467H182.681V50.5459Z" fill="#0E2F84"></path><path d="M190.59 50.7684C190.535 49.7241 190.468 48.4698 190.479 47.5368H190.446C190.19 48.4139 189.88 49.3469 189.502 50.3798L188.181 54.0107H187.448L186.238 50.4459C185.882 49.3915 185.582 48.4252 185.371 47.5368H185.349C185.327 48.4698 185.272 49.7241 185.205 50.8457L185.005 54.0547H184.083L184.605 46.5705H185.838L187.115 50.1906C187.426 51.1123 187.681 51.934 187.87 52.7117H187.903C188.092 51.9561 188.358 51.1343 188.692 50.1906L190.024 46.5705H191.257L191.723 54.0547H190.779L190.59 50.7684Z" fill="#0E2F84"></path><path d="M196.968 50.9451L196.236 48.7911C196.069 48.3026 195.958 47.8587 195.847 47.4256H195.825C195.714 47.8694 195.592 48.3252 195.447 48.7798L194.714 50.9451H196.968ZM194.514 51.7008L193.737 54.0547H192.738L195.281 46.5699H196.446L199 54.0547H197.968L197.168 51.7008H194.514Z" fill="#0E2F84"></path>
                    </g>
                </svg>
            </NavLink>
            <div className={s.EnterButton} onClick={() => setEnterMode('Enter')}>Войти</div>
            {EnterMode === 'Enter' ? <EnterPage setEnterMode={setEnterMode}></EnterPage> : null}
            {EnterMode === 'Registration' ? <EnterPage></EnterPage> : null}
        </div>
    )
}

const EnterPage = (props) => { // Компонента для входа

    var [UserEmail, setUserEmail] = useState('')
    var [UserPassword, setUserPassword] = useState('')

    if (document.cookie && UserEmail != GetCoockie('UserLogin') && UserPassword != GetCoockie('UserPassword')) { //Чтение данных из Cookie, если они есть
        setUserEmail(GetCoockie('UserLogin'))
        setUserPassword(GetCoockie('UserPassword'))
    }

    return (
        <div className={s.EnterPage} >
            <div className={s.EnterWindow}>
                <div className={s.CloseButton} onClick={() => props.setEnterMode('None')}>&#10006;</div>
                <div className={s.EnterWindowContainer}>
                    <div className={s.EnterName}>Войти на сайт</div>
                    <div className={s.place}>Email<div className={s.Star}>&#10034;</div>:</div>
                    <input className={s.EnterInput} id="Email" value={UserEmail} onChange={(e) => setUserEmail(e.target.value)}></input>
                    <div className={s.place}>Пароль<div className={s.Star}>&#10034;</div>:</div>
                    <input className={s.EnterInput} id="Pass" type="password" value={UserPassword} onChange={(e) => setUserPassword(e.target.value)} ></input>
                    <div className={s.EnterButtons}>
                        <div className={s.RegButton} onClick={() => alert('Данный раздел пока не сделан')}>Регистрация</div>
                        <div className={s.EnterEnterButton} onClick={() => {
                            if (!document.getElementById('Email').value) {
                                alert('Не ввели Email')
                                return
                            }
                            if (!document.getElementById('Pass').value) {
                                alert('Не ввели пароль')
                                return
                            }
                            if (!/^[\w]{1}[\w-\.]*@[\w-]+\.[a-z]{2,4}$/i.test(document.getElementById('Email').value)) {
                                alert('Некорректный email')
                                return
                            }
                            document.cookie = `UserLogin=${document.getElementById('Email').value}; path=/; expires=Tue, 19 Jan 2038 03:14:07 GMT`
                            document.cookie = `UserPassword=${document.getElementById('Pass').value}; path=/; expires=Tue, 19 Jan 2038 03:14:07 GMT`
                            alert('Данные введены корректно, идёт передача на сервер...')
                        }}>Войти</div>
                    </div>
                    <div className={s.ForgetPass}>Забыли пароль?</div>
                </div>
            </div>
        </div>
    )
}

const GetCoockie = (cookie_name) => { //Получение данных из Cookie оп ключу
    if (document.cookie) {
        var results = document.cookie.match('(^|;) ?' + cookie_name + '=([^;]*)(;|$)');
        if (results)
            return (unescape(results[2]));
        else
            return null;
    }
}